package com.example.demo.Config;

import java.io.IOException;
import java.util.List;

import org.springframework.http.HttpHeaders;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.web.filter.OncePerRequestFilter;

import com.example.demo.Service.MemberService;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RequiredArgsConstructor
@Slf4j
public class JwtTokenFilter extends OncePerRequestFilter {
	
	private final MemberService memberService;
	private final String key;
	
// index,회원가입, 로그인 제외 다른 모든기능을 다 막아놓았다 filter가 바로 문이라고 생각을 하면된다.(token에서 claim의 정보를 꺼내오고, 권한을 부여한다.)
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException{
		
		final String authentication = request.getHeader(HttpHeaders.AUTHORIZATION);
		log.info("authentication:{}", authentication);
		// 요청의 헤더에서 HttpHeaders.AUTHORIZATION부분을 꺼내옴(즉, header의 인증부분 - 토큰을 꺼내옴)
		
		// token을 보내지 않으면 block처리
		if(authentication == null) {
			// 헤더의 인증부분을(토큰) 안보냈을경우(인증을 하지 않은 클라이언트)
			log.error("authentication이 없습니다.");
			filterChain.doFilter(request, response); // filterChain은 반드시 거쳐야함으로 적어줌
			return;
		}
		// memberEmail Token에서 꺼내기
		 String memberEmail = "";
	
		// 권한 부여(UsernamePasswordAuthenticationToken - login과 pssword로 인증하는 경우 이 필터를 많이 쓴다.)
		 // 인증이 완료되며누 member 권한부여
		UsernamePasswordAuthenticationToken authenticationToken =
				new UsernamePasswordAuthenticationToken(memberEmail, null, List.of(new SimpleGrantedAuthority("MEMBER")));
		// Detail을 넣어준다 
		authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
		SecurityContextHolder.getContext().setAuthentication(authenticationToken);
		// request안애 authenticationToken넣기 - 인증된 토근이라는 표시
		filterChain.doFilter(request, response);
	}
}

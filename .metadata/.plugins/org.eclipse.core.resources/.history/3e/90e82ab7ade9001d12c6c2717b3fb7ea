package com.example.demo.Controller;

import java.util.*;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
// ajax요청이므로 @ResoponseBody 어노테이션 사용

import com.example.demo.Dto.CommentDTO;
import com.example.demo.Service.CommentService;

import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
@RequestMapping("/comment")
public class CommentController {
	
	private final CommentService commentService;
	
	@PostMapping("/save")
	public ResponseEntity save(@ModelAttribute CommentDTO commentDTO) {
		// ResponseEntity body뿐만아니라 header부분도 작성할수 있음 (http상태 표시 코드 등)
		System.out.println("commentDTO" + commentDTO);
		Long saveResult = commentService.save(commentDTO);
		// 저장된 댓글의 번호를 받는(commentEntity의 pk이므로 타입은 Long) 값이 있을 경우와 없을경우. 
		//즉, 댓글이 제대로 저장이 됐을경우와 안되었을 경우
		if (saveResult != null) {
			// 댓글이 저장이 되었을 경우(댓글이 존재한다면) - 댓글목록을 가져와서 리턴
			// 댓글목록: 해당게시글의 댓글 전체 즉, 게시글 id에 해당하는 댓글 전체를 가지고와야함(list로)
			List<CommentDTO> commentDTOList = commentService.findAll(commentDTO.getBoardId());
			
			return new ResponseEntity<>(commentDTOList, HttpStatus.OK);
			
		} else {
		
			return new ResponseEntity<>("해당 게시글이 존재하지 않습니다.", HttpStatus.NOT_FOUND);
		}
	}

}
